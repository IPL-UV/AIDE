# Configuration file
name: 'AIDE'
# Addressed task, choices: Classification, OutlierDetection
task: 'Classification'
# Use a previously saved model to skip train phase
from_scratch: true
# Path to the best model, required if from_scrath: false
best_run_path: ""
# Directory to save model outputs and results
save_path: "experiments/"
# Debug mode: sets inference / xai to only two samples and prints extra info
debug: False

# Database and DataLoader definition
data:
    name: 'DROUGHT'
    data_dim: 3 # Data dimension
    seed_idx: 1
    root: './databases/Italy' # Database root
    data_file: 'esdc-italy' # Data filename
    labels_file: 'Italy_droughts_masks.zarr' # Labels filename
    # 47.0417,35.8750,6.7083,18.4583
    lat_slice_train: "47.5, 35.5" # Max/min latitude coordinates (train)
    lon_slice_train: "6.5, 18.5" # Min/max longitude coordinates (train)
    input_size_train: (256,256,1) # (256,256,32) # Model input size (lat,lon,time)
    lat_slice_test: "47.5, 35.5" # Max/min latitude coordinates (test)
    lon_slice_test: "6.5, 18.5"  # Min/max longitude coordinates (test)
    input_size_test: (256,256,1)  # (256,256,32) # Model output size (lat,lon,time)
    time_slice: "'January-2012','December-2018'" # Time interval selected
    features: # ECVs included in the database
        - 'root_moisture'
        - 'air_temperature_2m'
    features_selected: [0,1] # ECVs selected
    # Directory to save climatology mean values
    climatology_mean_root: './databases/Italy/data_py/climatology_mean'
    # Directory to save climatology standard deviation values
    climatology_std_root: './databases/Italy/data_py/climatology_std'
    # Clip values after pre-processing based on climatology
    climatology_clipping: true
    nexp: "1" # Number of experiment to be performed
    # Train, validation and test slices for each experiment
    train_slice:
        exp1:
            - "'1-July-2012','31-December-2016'"
    val_slice:
        exp1:
            - "'1-January-2012','30-June-2012'"
    test_slice:
        exp1:
            - "'1-January-2017','31-December-2018'"
    batch_size: 1 # Batch size
    num_classes: 2 # Number of categories in the database (drought, non-drought)
# Architecture definition
arch:
    # Select user-defined model (true/false)
    user_defined: True
    # Type of architecture to be used (e.g., 'UNET')
    type: "CNN2D"
    # Model input dimension (1: 1D, 2: 2D)
    input_model_dim: 2
    # Model output dimension (1: 1D, 2: 2D)
    output_model_dim: 2

# Definition of the training stage
implementation:
    # Loss function
    loss:
        user_defined: false # Select user-defined model (true/false)
        type: "sigmoid_focal_loss" # Type
        package: 'torchvision.ops' # Package, none for user defined 
        activation: 
            type: 'linear' # Activation before computing the loss function
        masked: true # Use masks to compute loss true
        # Parameters for the loss function
        params:
            reduction: 'none'
            alpha: 0.99
            gamma: 2 #4.75
    # Definition of the optimizer
    optimizer:
        type: "Adam" # Optimizer type
        lr: 0.0001 # Learning rate
        weight_decay: 0 # Weight decay
        gclip_value: -1 # Gradient clipping values

    # Definition of Pytorch trainer
    trainer:
        accelerator: 'gpu' #Pytorch Lightning 2.0
        devices: 1 #Pytorch Lightning 2.0
        epochs: 1000 # Number of epochs 50
        batch_size: 4 # Batch size
        monitor: # Metric to be monitored during training
            split: 'val'
            metric: 'AUROC'
        monitor_mode: 'max' # Monitor mode (increase or decrease monitored metric value)
        early_stop: 10 # Number of steps to perform early stopping
        save_dir: "experiments/" # Directory to save model outputs and results
    # Definition of Pytorch data loader
    data_loader:
        num_workers: 16

# Types of choosen evaluations, choices: Visualization, Characterization, XAI
evaluation:
    metrics:
        AUROC: {task: 'binary'}
        AveragePrecision: {task: 'binary'}
        Accuracy: {task: 'binary'}

    visualization:
        activate: true
        params:
            time_aggregation: true # Time aggregation for visualization purposes

    characterization:
        activate: true
        params:
            time_aggregation: true # Time aggregation for visualization purposes
            min_distance: 100 # minimum euclidean distance between pixels to consider two True pixels connected
            remove_scant: false
            min_area_holes: 64
            min_area_objects: 64
            threshold:
                F1Score: {task: 'multiclass', num_classes: 4} # predefined threshold or selected threshold metrics for characterization, 0.5 or 'f1_score'
            threshold_lower_is_best: false

    xai:
        activate: true
        params:
            type: 'Saliency' #'IntegratedGradients'
            out_agg_dim: [2,3]
            params: ~
            mask: "events" #One of ["none", "events[-full]", "correctness[-full]", "labels[-full]", "custom[-full]"]     
            time_aggregation: true # Time aggregation for visualization purposes
            min_distance: 100 # minimum euclidean distance between pixels to consider two True pixels connected
            remove_scant: false
            min_area_holes: 64
            min_area_objects: 64   
            threshold:
                F1Score: {task: 'multiclass', num_classes: 4} # predefined threshold or selected threshold metrics for characterization, 0.5 or 'f1_score'
            threshold_lower_is_best: false
