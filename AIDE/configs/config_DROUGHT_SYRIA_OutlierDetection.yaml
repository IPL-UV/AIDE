# Configuration file
name: 'AIDE'
# Addressed task, choices: Classification, OutlierDetection, ImpactAssessment
task: 'OutlierDetection'
# Use a previously saved model to skip train phase
from_scratch: true
# Path to the best model, required if from_scrath: false
best_run_path: ""
# Directory to save model outputs and results
save_path: "experiments/" 
# Debug mode: sets inference / xai to only two samples and prints extra info
debug: 2 

# Database and DataLoader definition
data:
    name: 'DROUGHT'
    data_dim: 3 # Data dimension
    seed_idx: 1
    root: './databases/Syria' # Database root
    data_file: 'esdc-syria' # Data filename
    labels_file: 'Syria_droughts_masks.zarr' # Labels filename
    lat_slice_train: "42.5, 21.2" # Max/min latitude coordinates (train)
    lon_slice_train: "29, 50.3" # Min/max longitude coordinates (train)
    input_size_train: (256,256,1) # Model input size (lat,lon,time)
    lat_slice_test: "42.5, 21.2" # Min/max latitude coordinates (test)
    lon_slice_test: "29, 50.3" # Min/max longitude coordinates (test)
    input_size_test: (256,256,1) # Model output size (lat,lon,time)
    time_slice: "'January-2006','December-2012'" # Time interval selected
    features: # ECVs included in the database
        - 'root_moisture' 
        - 'air_temperature_2m'
    features_selected: [0,1] # ECVs selected
    # Directory to save climatology mean values
    climatology_mean_root: './databases/Syria/data_py/climatology_mean'
    # Directory to save climatology standard deviation values 
    climatology_std_root: './databases/Syria/data_py/climatology_std'
    # Clip values after pre-processing based on climatology
    climatology_clipping: true
    nexp: "1" # Number of experiment to be performed
    # Train, validation and test slices for each experiment
    train_slice:
        exp1:
            - "'1-January-2008','31-December-2008'"
    val_slice:
        exp1:
            - "'1-January-2009','31-December-2009'"
    test_slice:
        exp1:
            - "'1-January-2010','31-December-2010'"
    time_aggregation: true # Time aggregation for visualization purposes
    num_classes: 2 # Number of categories in the database (drought, non-drought)
    
# Architecture definition
arch:
    # Select user-defined model (true/false)
    user_defined: False 
    # Type of architecture to be used (e.g., 'UNET')
    type: 'pca.PCA' # "specifies the type of architecture to be used
    # Parameters to configure the architecture (see description in PyOD API)
    args:
        contamination: 0.1
        weighted: true
        white: true
        standardization: true
        
    # Model input dimension (1: 1D, 2: 2D)
    input_model_dim: 1
    # Model output dimension (1: 1D, 2: 2D)
    output_model_dim: 1
    # Select 1 out of 100 samples for training or evaluation purposes
    step_samples_train: 10000
    step_samples_evaluation: 2500
    
# Definition of the training stage
implementation:
    # Definition of Pytorch trainer
    trainer:  
        batch_size: 2 # Batch size
    # Definition of Pytorch data loader
    data_loader: 
        num_workers: 12 # Number of CPUs to read the data in parallel

# Visualization
evaluation:  
    visualization:
        activate: true

